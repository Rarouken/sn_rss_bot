import feedparser
import requests
import re
import hashlib
import os
import time
from transformers import pipeline

# =============================== #
# KONFIGURACJA FILTR√ìW I KRAJ√ìW  #
# =============================== #

# Tematy istotne (fragmenty s≈Ç√≥w)
KEYWORD_ROOTS = [
    # Polityka
    "polit", "prezydent", "premier", "minister", "parlament", "wybor", "ustaw", "rzad", "dyplom", "ambasad",
    "protest", "opozycj", "koalicj", "demokra", "autokrat", "wolno", "slowa", "prawa", "konstytuc",
    "rzƒÖd", "gover", "law", "president", "prime minist", "minist", "cabinet", "senat", "sejm", "rada", "parliament",
    # Gospodarka
    "ekonom", "gospodar", "handl", "inwest", "pib", "PKB", "inflac", "bezroboc", "podat", "ryn", "bank", "gie≈Çd", "zysk", "strata",
    "export", "import", "trade", "finance", "investment", "budget", "subsidy", "unemployment", "inflation",
    # Bezpiecze≈Ñstwo i wojsko
    "bezpiecz", "milit", "wojs", "armia", "nato", "army", "defence", "security", "wojna", "inwazj", "agresj", "obrona", "uk≈Çad", "pakt",
    "border", "granica", "warfare", "mobilizacj", "military", "police", "s≈Çu≈ºb", "intelligence", "spy", "espionage",
    # Historia
    "histori", "wojn", "konflikt", "imperi", "reform", "rewolucj", "koloniz", "odrodz", "zwiazk", "ZSRR", "Jugoslaw", "collapse", "partition",
    # Kultura, media, to≈ºsamo≈õƒá
    "kultur", "tradycj", "jezyk", "literatur", "film", "sztuk", "muzyk", "zwyczaj", "religi", "identy", "narod", "etni", "heritage",
    "media", "journalism", "press", "propaganda", "disinfo", "fake news", "identity", "diaspora", "slaw", "slav",
    # Spo≈Çecze≈Ñstwo i ruchy spo≈Çeczne
    "spo≈Çecz", "mniejszo≈õƒá", "protest", "uchod≈∫c", "emigrac", "refugee", "minority", "civil", "ngo", "stowarzyszen",
    # Miƒôdzynarodowe/region
    "ue", "unii europej", "european union", "usa", "chiny", "chin", "usa", "usa", "united states", "germany", "niemc", "rzƒÖd", "administracj",
    "stosunki", "relacje", "diplomatic", "dyplom", "ambasador", "embassy", "delegation", "organi", "osce", "un", "onzet", "europarl", "parlament europejski"
]


# Wykluczane tematy
EXCLUDE_ROOTS = [
    "sport", "football", "soccer", "basketball", "hockey", "volleyball", "olympic", "mecz", "liga", "turniej",
    "pogod", "klimat", "temperatur", "meteorolog", "prognoza", "deszcz", "≈õnieg",
    "promocj", "ogloszen", "lokaln", "wypad", "accident", "zderzen", "tragedi", "pozar", "fire", "katastrof", "zdrowi", "health", "medical", "turystyk", "tourism", "hotel",
    "kulinar", "moda", "fashion", "showbiz", "celebrity", "celebryta", "rozrywka", "entertainment"
]

# Fragmenty nazw kraj√≥w s≈Çowia≈Ñskich (PL, EN, lokalne, cyrylica)
SLAVIC_COUNTRIES = [
    # POLSKA
    "polsk", "polska", "poland", "pl", "warszaw", "warsaw",
    # CZECHY
    "czech", "czesk", "czechy", "cesko", "cesk√°", "cesk√° republika", "cz", "praga", "prague", "praha",
    # S≈ÅOWACJA
    "slovak", "s≈Çowac", "slovakia", "slovensko", "sk", "bratislava",
    # S≈ÅOWENIA
    "sloven", "sloveni", "slovenia", "slovenija", "si", "ljubljana",
    # CHORWACJA
    "chorwat", "chorwac", "croatia", "hrvatska", "hr", "zagreb",
    # SERBIA
    "serb", "serbia", "srbija", "rs", "belgrad", "belgrade",
    # CZARNOG√ìRA
    "czarnog√≥ra", "montenegro", "crna gora", "me", "podgorica",
    # MACEDONIA P√ì≈ÅNOCNA
    "macedon", "macedonia", "north macedonia", "severna makedonija", "mk", "skopje",
    # BO≈öNIA I HERCEGOWINA
    "bosnia", "bo≈õnia", "bosniak", "hercegowina", "hercegovina", "ba", "sarajewo", "sarajevo",
    # BU≈ÅGARIA
    "bu≈Çgar", "bulgar", "bulgaria", "balgariya", "bg", "sofia",
    # BIA≈ÅORU≈ö
    "bia≈Çoru≈õ", "bia≈Çor", "belarus", "bielarus", "by", "minsk", "–º—ñ–Ω—Å–∫", "–º–∏–Ω—Å–∫",
    # ROSJA
    "rosja", "rosyjski", "russia", "rossiya", "ru", "moskwa", "moscow", "–º–æ—Å–∫–≤–∞",
    # UKRAINA
    "ukraina", "ukrain", "ukraine", "ua", "kij√≥w", "kyiv", "kievan", "–∫–∏—ó–≤", "–∫–∏–µ–≤", "–∫–∏—ó–≤",
    # OG√ìLNO-S≈ÅOWIA≈ÉSKIE
    "slavic", "slawic", "slaw", "slav", "s≈Çowian", "s≈Çowia≈Ñsk", "slavs", "slavyane", "slavianski", "s≈Çowianie",
    "—Å–ª–∞–≤—è–Ω", "—Å–ª–æ–≤—è–Ω", "—Å–ª–æ–≤'—è–Ω", "—Å–ª–∞–≤—è–Ω—Å–∫–∏–π", "slovenstvo", "slavonic",
    # REGIONY/SKR√ìTY/SYNONIMY
    "east europe", "central europe", "cee", "see", "balkan", "ba≈Çkan", "–±–∞–ª–∫–∞–Ω", "balkans",
    "visegrad", "grupa wyszehradzka", "visegrad group", "visegrad four", "v4",
    "wschodnia europa", "≈õrodkowa europa", "eastern bloc", "former soviet", "post-soviet", "eurasia", "eurazja", "eurasian",
    # DODATKOWE
    "eurazjatycki", "europejski wsch√≥d", "—Å—Ö—ñ–¥–Ω–∞ —î–≤—Ä–æ–ø–∞", "–≤–æ—Å—Ç–æ—á–Ω–∞—è –µ–≤—Ä–æ–ø–∞", "—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –µ–≤—Ä–æ–ø–∞",
    "–∞–¥—Ä–∏–∞—Ç–∏–∫–∞", "adriatic", "adriatycki", "p√≥≈Çwysep ba≈Çka≈Ñski", "balkan peninsula"
]


# =============================== #
# RSS FEEDS
# =============================== #

rss_feeds = [
    # üìå Og√≥lne ≈∫r√≥d≈Ça informacyjne
    "https://www.rmf24.pl/fakty/polska/feed",                # Polska ‚Äì RMF24
    "https://rss.onet.pl/",                                 # Polska ‚Äì Onet
    "https://gazeta.pl/rss/",                               # Polska ‚Äì Gazeta.pl

    "https://www.ceskatelevize.cz/rss/ct24.xml",            # Czechy ‚Äì ƒåT24
    "https://www.idnes.cz/rss.aspx",                        # Czechy ‚Äì iDnes.cz
    "https://rss.aktualne.cz/",                             # Czechy ‚Äì Aktu√°lnƒõ.cz

    "https://www.sme.sk/rss/",                              # S≈Çowacja ‚Äì SME.sk
    "https://spravy.pravda.sk/rss/",                        # S≈Çowacja ‚Äì Pravda.sk
    "https://www.aktuality.sk/rss/",                        # S≈Çowacja ‚Äì Aktuality.sk

    "https://meduza.io/rss/all",                            # Rosja ‚Äì Meduza
    "https://rss.ria.ru/export/rss2/world/index.xml",       # Rosja ‚Äì RIA Novosti
    "https://www.themoscowtimes.com/rss",                   # Rosja ‚Äì The Moscow Times

    "https://www.pravda.com.ua/rss",                        # Ukraina ‚Äì Ukrainska Pravda
    "https://kyivindependent.com/feed",                     # Ukraina ‚Äì Kyiv Independent
    "https://www.kyivpost.com/rss/site.xml",                # Ukraina ‚Äì Kyiv Post
    "https://www.radiosvoboda.org/api/feeds",               # Ukraina ‚Äì Radio Svoboda

    "https://nashaniva.com/ru/rss/",                        # Bia≈Çoru≈õ ‚Äì Nasha Niva
    "https://www.rferl.org/api/feeds?region=Belarus",       # Bia≈Çoru≈õ ‚Äì Radio Svoboda

    "https://www.rts.rs/rss/ci.xml",                        # Serbia ‚Äì RTS
    "https://www.blic.rs/rss",                              # Serbia ‚Äì Blic
    "https://www.danas.rs/feed/",                           # Serbia ‚Äì Danas

    "https://www.hrt.hr/feeds/",                            # Chorwacja ‚Äì HRT
    "https://www.index.hr/rss/",                            # Chorwacja ‚Äì Index.hr
    "https://www.jutarnji.hr/rss",                          # Chorwacja ‚Äì Jutarnji list

    "https://balkaninsight.com/feed/",                      # Bo≈õnia i Hercegowina ‚Äì BIRN BiH
    "https://cin.ba/feed/",                                 # Bo≈õnia i Hercegowina ‚Äì CIN
    "https://ba.n1info.com/rss/",                           # Bo≈õnia i Hercegowina ‚Äì N1 BiH

    "https://www.vijesti.me/rss",                           # Czarnog√≥ra ‚Äì Vijesti
    "https://www.raskrinkavanje.me/rss",                    # Czarnog√≥ra ‚Äì Raskrinkavanje

    "https://kallxo.com/feed/",                             # Kosowo ‚Äì Kallxo
    "https://www.koha.net/rss",                             # Kosowo ‚Äì Koha Ditore

    "https://meta.mk/feed/",                                # Macedonia P√≥≈Çnocna ‚Äì Meta.mk
    "https://www.slobodenpecat.mk/feed/",                   # Macedonia P√≥≈Çnocna ‚Äì Sloboden Pechat

    "https://btvnovinite.bg/rss",                           # Bu≈Çgaria ‚Äì BTV News
    "https://nova.bg/news/rss",                             # Bu≈Çgaria ‚Äì Nova TV
    "https://www.dnevnik.bg/rss.php",                       # Bu≈Çgaria ‚Äì Dnevnik.bg

    "https://www.rtvslo.si/rss/",                           # S≈Çowenia ‚Äì RTV Slovenija
    "https://www.delo.si/rss/",                             # S≈Çowenia ‚Äì Delo
    "https://podcrto.si/feed/",                             # S≈Çowenia ‚Äì Pod ƒçrto

    # üíº Sekcje ekonomiczne
    "https://www.pb.pl/rss",                                # Polska ‚Äì Puls Biznesu :contentReference[oaicite:1]{index=1}

    "https://hn.ihned.cz/rss",                              # Czechy ‚Äì Hospod√°≈ôsk√© noviny

    "https://www.hnonline.sk/rss",                          # S≈Çowacja ‚Äì Hospod√°rske noviny

    "https://www.vedomosti.ru/rss/news.xml",                # Rosja ‚Äì Vedomosti

    "https://www.interfax.com.ua/ua/rss/business/",         # Ukraina ‚Äì Interfax-Ukraine Business

    # Bia≈Çoru≈õ ‚Äì brak RSS specyficznego, mo≈ºna siƒôgnƒÖƒá po emigracyjne
    "https://bizlife.rs/feed/",                             # Serbia ‚Äì BizLife.rs

    "https://www.poslovni.hr/rss",                          # Chorwacja ‚Äì Poslovni dnevnik

    "https://cin.ba/feed/",                                 # Bo≈õnia i Hercegowina ‚Äì CIN (sekcja tak≈ºe ekonomiczna)

    "https://www.vijesti.me/rss/business",                  # Czarnog√≥ra ‚Äì Vijesti Business

    "https://biznes.koha.net/rss",                          # Kosowo ‚Äì Koha Biznes

    "https://meta.mk/feed/",                                # Macedonia P√≥≈Çnocna ‚Äì Meta.mk (analizy ekonomiczne)

    "https://www.capital.bg/rss",                           # Bu≈Çgaria ‚Äì Capital.bg :contentReference[oaicite:2]{index=2}

    "https://www.monitor.si/rss/",                          # S≈Çowenia ‚Äì Monitor.si

    "https://www.imf.org/external/index.xml"                # Globalnie ‚Äì IMF Publications
]

# =============================== #
# DISCORD WEBHOOK
# =============================== #

DISCORD_WEBHOOK = "https://discordapp.com/api/webhooks/1392262052742959155/DEQ5zlgo3bdqzFkrLX1OyxyvybmRLnVNqcAQjeDVwt8FtUeXhCodvR6UuUILBdAUGvQi"  # <- tu wklej sw√≥j

LT_ENDPOINTS = [
    "https://libretranslate.com/translate",
    "https://translate.astian.org/translate",
    "https://libretranslate.de/translate",
    "https://translate.argosopentech.com/translate"
]

from googletrans import Translator as GoogleTranslator
google_translator = GoogleTranslator()

# =============================== #
# T≈ÅUMACZENIE
# =============================== #
def translate_to_english(text):
    MAX_CHARS = 3500
    if len(text) > MAX_CHARS:
        text = text[:MAX_CHARS].rsplit(" ", 1)[0] + "..."
    for url in LT_ENDPOINTS:
        try:
            payload = {
                "q": text,
                "source": "auto",
                "target": "en",
                "format": "text"
            }
            response = requests.post(url, data=payload, timeout=15)
            if response.ok:
                data = response.json()
                translated = data.get("translatedText", "").strip()
                if translated and translated.lower() != text.lower() and len(translated) > 15:
                    return translated
        except Exception:
            continue
    try:
        translated = google_translator.translate(text, dest='en').text
        if translated and translated.lower() != text.lower():
            return f"[Google Fallback] {translated}"
    except Exception:
        pass
    first_line = text.split('\n', 1)[0].strip()
    return f"[Translation failed]\nOriginal headline:\n{first_line}"

from transformers import pipeline

# =============================== #
# HUGGINGFACE: KLASYFIKACJA
# =============================== #
hf_classifier = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")

TOPIC_LABELS = [
    "polityka krajowa", "polityka zagraniczna", "gospodarka", "historia", "kultura", "spo≈Çecze≈Ñstwo",
    "bezpiecze≈Ñstwo", "wojna", "dyplomacja", "to≈ºsamo≈õƒá narodowa", "media", "integracja s≈Çowia≈Ñska",
    "stosunki miƒôdzynarodowe", "konflikty", "prawo", "samorzƒÖd", "organizacje miƒôdzynarodowe"
]

def classify_topic(text):
    result = hf_classifier(text, TOPIC_LABELS)
    top_label = result["labels"][0]
    top_score = result["scores"][0]
    print(f"[CLASSIFY] ‚Üí {top_label} ({top_score:.2f}) for text: {text[:80]}")
    if top_score >= 0.6:
        return top_label
    return None

def is_relevant(entry):
    # Pobranie i oczyszczenie tekstu z HTML
    text = (entry.title + " " + entry.get("summary", "")).lower()
    text = re.sub(r'<.*?>', ' ', text)

    # Sprawdzanie obecno≈õci s≈Ç√≥w kluczowych
    has_keyword = any(root in text for root in KEYWORD_ROOTS)

    # Sprawdzanie obecno≈õci wykluczajƒÖcych s≈Ç√≥w
    has_exclude = any(root in text for root in EXCLUDE_ROOTS)

    # Wiadomo≈õƒá jest istotna, je≈õli zawiera s≈Çowo kluczowe i nie zawiera s≈Ç√≥w wykluczajƒÖcych
    return has_keyword and not has_exclude

# DODAJ TO TU:
def contains_slavic_country(text, tags, source):
    # Szukamy w tek≈õcie, tagach i ≈∫r√≥dle (wszystko na lower)
    for root in SLAVIC_COUNTRIES:
        if root in text:
            return True
        if any(root in tag.lower() for tag in tags):
            return True
        if root in source.lower():
            return True
    return False

# =============================== #
# ANTYDUPLIKATY
# =============================== #
ARTICLE_TTL_SECONDS = 3 * 24 * 3600
SENT_ARTICLES_FILE = "sent_articles.txt"

def get_article_id(entry):
    unique_string = (entry.title + entry.link).encode("utf-8")
    return hashlib.md5(unique_string).hexdigest()

def was_sent(article_id):
    if not os.path.exists(SENT_ARTICLES_FILE):
        return False
    valid_lines = []
    now = time.time()
    found = False
    with open(SENT_ARTICLES_FILE, "r") as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) != 2:
                continue
            existing_id, timestamp = parts
            try:
                timestamp = float(timestamp)
            except ValueError:
                continue
            if now - timestamp < ARTICLE_TTL_SECONDS:
                valid_lines.append(f"{existing_id} {int(timestamp)}")
                if existing_id == article_id:
                    found = True
    with open(SENT_ARTICLES_FILE, "w") as f:
        f.write("\n".join(valid_lines) + "\n")
    return found

def mark_as_sent(article_id):
    with open(SENT_ARTICLES_FILE, "a") as f:
        f.write(f"{article_id} {int(time.time())}\n")

# =============================== #
# WYSY≈ÅKA DO DISCORDA
# =============================== #
def send_to_discord(title, link, summary=None, topic=None):
    original = f"**{title}**\n{link}\n{summary or ''}"
    to_translate = f"{title}\n{summary or ''}"
    translated = translate_to_english(to_translate)
    topic_label = f"[**{topic.upper()}**]\n" if topic else ""
    content = (
        f"{topic_label}"
        f"**Orygina≈Ç:**\n{original}\n\n"
        f"**üá¨üáß T≈Çumaczenie:**\n{translated}"
    )
    data = {"content": content}
    try:
        requests.post(DISCORD_WEBHOOK, json=data)
    except Exception as e:
        print(f"B≈ÇƒÖd Discord webhook: {e}")

# =============================== #
# G≈Å√ìWNA PƒòTLA: pobieranie i filtrowanie
# =============================== #
def fetch_and_filter():
    for feed_url in rss_feeds:
        feed = feedparser.parse(feed_url)
        for entry in feed.entries:
            article_id = get_article_id(entry)
            if was_sent(article_id):
                continue
            # Przygotuj tekst i tagi
            text = f"{entry.title} {entry.get('summary', '')}".lower()
            tags = [tag['term'] for tag in entry.get("tags", []) if 'term' in tag]
            source = entry.get("source", {}).get("title", "") or feed_url
            # FILTRACJA:
            if not is_relevant(entry):
                continue
            if not contains_slavic_country(text, tags, source):
                continue
            topic = classify_topic(text)
            if topic:
                send_to_discord(entry.title, entry.link, entry.get("summary", ""), topic)
                mark_as_sent(article_id)

if __name__ == "__main__":
    fetch_and_filter()
